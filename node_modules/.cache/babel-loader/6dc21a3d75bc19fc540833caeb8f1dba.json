{"ast":null,"code":"import { ApolloClient, InMemoryCache, from } from '@apollo/client';\nimport { createUploadLink } from 'apollo-upload-client';\nimport { onError } from '@apollo/client/link/error';\nconst link = createUploadLink({\n  uri: process.env.REACT_APP_PROFILE_URL\n});\nconst errorLink = onError(_ref => {\n  let {\n    graphQLErrors,\n    networkError\n  } = _ref;\n  if (graphQLErrors) graphQLErrors.forEach(_ref2 => {\n    let {\n      message,\n      locations,\n      path\n    } = _ref2;\n    return console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`);\n  });\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\nconst cache = new InMemoryCache();\nconst client = new ApolloClient({\n  link: from([errorLink, link]),\n  cache\n});\nexport default client;","map":{"version":3,"sources":["E:/IGSB2B_Admin/src/apolloClient.js"],"names":["ApolloClient","InMemoryCache","from","createUploadLink","onError","link","uri","process","env","REACT_APP_PROFILE_URL","errorLink","graphQLErrors","networkError","forEach","message","locations","path","console","log","cache","client"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,IAAtC,QAAkD,gBAAlD;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,SAASC,OAAT,QAAwB,2BAAxB;AAEA,MAAMC,IAAI,GAAGF,gBAAgB,CAAC;AAAEG,EAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAAnB,CAAD,CAA7B;AACA,MAAMC,SAAS,GAAGN,OAAO,CAAC,QAAqC;AAAA,MAApC;AAAEO,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,GAAoC;AAC3D,MAAID,aAAJ,EACIA,aAAa,CAACE,OAAd,CAAsB;AAAA,QAAC;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,SAAX;AAAsBC,MAAAA;AAAtB,KAAD;AAAA,WAClBC,OAAO,CAACC,GAAR,CACK,6BAA4BJ,OAAQ,eAAcC,SAAU,WAAUC,IAAK,EADhF,CADkB;AAAA,GAAtB;AAMJ,MAAIJ,YAAJ,EAAkBK,OAAO,CAACC,GAAR,CAAa,oBAAmBN,YAAa,EAA7C;AACrB,CATwB,CAAzB;AAUA,MAAMO,KAAK,GAAG,IAAIlB,aAAJ,EAAd;AACA,MAAMmB,MAAM,GAAG,IAAIpB,YAAJ,CAAiB;AAC5BK,EAAAA,IAAI,EAAEH,IAAI,CAAC,CAACQ,SAAD,EAAYL,IAAZ,CAAD,CADkB;AAE5Bc,EAAAA;AAF4B,CAAjB,CAAf;AAKA,eAAeC,MAAf","sourcesContent":["import { ApolloClient, InMemoryCache, from } from '@apollo/client';\r\nimport { createUploadLink } from 'apollo-upload-client';\r\nimport { onError } from '@apollo/client/link/error';\r\n\r\nconst link = createUploadLink({ uri: process.env.REACT_APP_PROFILE_URL });\r\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\r\n    if (graphQLErrors)\r\n        graphQLErrors.forEach(({ message, locations, path }) =>\r\n            console.log(\r\n                `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\r\n            ),\r\n        );\r\n\r\n    if (networkError) console.log(`[Network error]: ${networkError}`);\r\n});\r\nconst cache = new InMemoryCache();\r\nconst client = new ApolloClient({\r\n    link: from([errorLink, link]),\r\n    cache\r\n});\r\n\r\nexport default client;\r\n"]},"metadata":{},"sourceType":"module"}