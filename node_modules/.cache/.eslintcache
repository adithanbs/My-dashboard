[{"E:\\IGSB2B_Admin\\src\\index.js":"1","E:\\IGSB2B_Admin\\src\\reportWebVitals.js":"2","E:\\IGSB2B_Admin\\src\\components\\layout\\Layout.jsx":"3","E:\\IGSB2B_Admin\\src\\components\\Routes.jsx":"4","E:\\IGSB2B_Admin\\src\\components\\sidebar\\Sidebar.jsx":"5","E:\\IGSB2B_Admin\\src\\pages\\dashboard\\Dashboard.jsx":"6","E:\\IGSB2B_Admin\\src\\pages\\users\\Users.jsx":"7","E:\\IGSB2B_Admin\\src\\pages\\events\\Events.js":"8","E:\\IGSB2B_Admin\\src\\redux\\store\\store.js":"9","E:\\IGSB2B_Admin\\src\\redux\\reducers\\index.js":"10","E:\\IGSB2B_Admin\\src\\redux\\reducers\\user-reducer.js":"11","E:\\IGSB2B_Admin\\src\\redux\\actions\\actionTypes.js":"12","E:\\IGSB2B_Admin\\src\\redux\\actions\\user.js":"13","E:\\IGSB2B_Admin\\src\\graphql\\mutations\\mutation-auth.js":"14","E:\\IGSB2B_Admin\\src\\graphql\\queries\\query-gql-docs.js":"15","E:\\IGSB2B_Admin\\src\\apolloClient.js":"16","E:\\IGSB2B_Admin\\src\\keycloak.js":"17","E:\\IGSB2B_Admin\\src\\pages\\settings\\Settings.js":"18","E:\\IGSB2B_Admin\\src\\pages\\users\\UserDetailsPop.js":"19","E:\\IGSB2B_Admin\\src\\graphql\\mutations\\muction_delet_customer_gql.js":"20","E:\\IGSB2B_Admin\\src\\pages\\users\\DeleteCustomerPopup.js":"21","E:\\IGSB2B_Admin\\src\\pages\\users\\EditCustomerPopup.js":"22","E:\\IGSB2B_Admin\\src\\graphql\\mutations\\mutation-edit-user-gql.js":"23","E:\\IGSB2B_Admin\\src\\pages\\add_new_user\\AddNewUser.js":"24","E:\\IGSB2B_Admin\\src\\graphql\\mutations\\mutation-gql-docs.js":"25"},{"size":2540,"mtime":1642596118053,"results":"26","hashOfConfig":"27"},{"size":375,"mtime":1641194482233,"results":"28","hashOfConfig":"27"},{"size":611,"mtime":1641194482229,"results":"29","hashOfConfig":"27"},{"size":944,"mtime":1642834981532,"results":"30","hashOfConfig":"27"},{"size":1369,"mtime":1641209176906,"results":"31","hashOfConfig":"27"},{"size":256,"mtime":1643110969033,"results":"32","hashOfConfig":"27"},{"size":5447,"mtime":1643024652645,"results":"33","hashOfConfig":"27"},{"size":190,"mtime":1641199589512,"results":"34","hashOfConfig":"27"},{"size":646,"mtime":1640770839827,"results":"35","hashOfConfig":"27"},{"size":124,"mtime":1640770839827,"results":"36","hashOfConfig":"27"},{"size":799,"mtime":1640770839827,"results":"37","hashOfConfig":"27"},{"size":161,"mtime":1640770839827,"results":"38","hashOfConfig":"27"},{"size":937,"mtime":1641223583528,"results":"39","hashOfConfig":"27"},{"size":457,"mtime":1641279096131,"results":"40","hashOfConfig":"27"},{"size":2971,"mtime":1643024185523,"results":"41","hashOfConfig":"27"},{"size":792,"mtime":1640770838981,"results":"42","hashOfConfig":"27"},{"size":380,"mtime":1641273501115,"results":"43","hashOfConfig":"27"},{"size":717,"mtime":1641280828898,"results":"44","hashOfConfig":"27"},{"size":7103,"mtime":1642848463748,"results":"45","hashOfConfig":"27"},{"size":185,"mtime":1642682976579,"results":"46","hashOfConfig":"27"},{"size":1438,"mtime":1642849708941,"results":"47","hashOfConfig":"27"},{"size":28004,"mtime":1642851824260,"results":"48","hashOfConfig":"27"},{"size":205,"mtime":1642750389808,"results":"49","hashOfConfig":"27"},{"size":19656,"mtime":1643111100489,"results":"50","hashOfConfig":"27"},{"size":1405,"mtime":1640770839796,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},"nmndzh",{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"55"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"55"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"55"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"55"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"55"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"55"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":5,"source":"104","usedDeprecatedRules":"55"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":3,"source":null},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"E:\\IGSB2B_Admin\\src\\index.js",["111"],"//import './index.css';\r\n// ----------------\r\n// import React from 'react';\r\n// import ReactDOM from 'react-dom';\r\n// import './index.scss';\r\n// import App from './App';\r\n// import * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n// import reportWebVitals from './reportWebVitals';\r\n// import 'bootstrap/dist/js/bootstrap.bundle.min';\r\n// import store from './redux/store/store';\r\n// import { persistStore } from 'redux-persist';\r\n// import { Provider } from 'react-redux';\r\n// import { PersistGate } from 'redux-persist/integration/react';\r\n// import { ApolloProvider } from '@apollo/client';\r\n// import client from './apolloClient';\r\n// import keycloak from './keycloak';\r\n// import { userLogin } from './redux/actions/user';\r\n// import { ReactKeycloakProvider } from '@react-keycloak/web';\r\n// import \"bootstrap-icons/font/bootstrap-icons.css\";\r\n\r\n// ----------------\r\n//import App from './App';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport store from './redux/store/store';\r\nimport { userLogin } from './redux/actions/user';\r\nimport { Provider } from 'react-redux';\r\nimport keycloak from './keycloak';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport Layout from './components/layout/Layout';\r\nimport client from './apolloClient';\r\nimport { ApolloProvider } from '@apollo/client';\r\nimport { ReactKeycloakProvider } from '@react-keycloak/web';\r\nimport { persistStore } from 'redux-persist';\r\n\r\nimport './assets/boxicons-2.0.7/css/boxicons.min.css'\r\nimport './assets/css/grid.css'\r\nimport './assets/css/theme.css'\r\nimport './assets/css/index.css'\r\nconst persistor = persistStore(store);\r\n\r\nconst initOptions = {\r\n  onLoad: 'check-sso',\r\n  checkLoginIframe: false,\r\n  silentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html'\r\n};\r\n\r\n\r\nconst getUser = (event) => {\r\n  if (event === 'onAuthSuccess') {\r\n    store.dispatch(userLogin(keycloak.tokenParsed.sub));\r\n  }\r\n};\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <ApolloProvider client={client}>\r\n     <ReactKeycloakProvider authClient={keycloak} initOptions={initOptions} onEvent={getUser}>\r\n     <Provider store={store}>\r\n     <Layout/>\r\n\r\n     </Provider>\r\n    </ReactKeycloakProvider>\r\n    </ApolloProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["112","113"],"E:\\IGSB2B_Admin\\src\\reportWebVitals.js",[],"E:\\IGSB2B_Admin\\src\\components\\layout\\Layout.jsx",[],"E:\\IGSB2B_Admin\\src\\components\\Routes.jsx",["114"],"import React from 'react'\r\n\r\nimport { Route, Switch } from 'react-router-dom'\r\n\r\nimport Dashboard from '../pages/dashboard/Dashboard'\r\nimport Events from '../pages/events/Events'\r\nimport Users from '../pages/users/Users'\r\nimport { useKeycloak } from '@react-keycloak/web';\r\nimport Settings from '../pages/settings/Settings'\r\nimport AddNewUser from '../pages/add_new_user/AddNewUser'\r\n\r\n\r\nconst Routes = () => {\r\n\r\n    const { keycloak } = useKeycloak();\r\n    const logout = () => {\r\n        localStorage.removeItem('persist:root');\r\n        keycloak.logout();\r\n      };\r\n    \r\n    return (\r\n        <>\r\n\r\n    <Switch>\r\n\r\n    <Route path='/' exact component={Dashboard}/>\r\n    <Route path='/users' component={Users}/>\r\n    <Route path='/evevts' component={Events}/>\r\n    <Route path='/settings' component={Settings}/>\r\n    <Route path='/add-new-user' component={AddNewUser}/>\r\n\r\n\r\n\r\n</Switch>\r\n\r\n\r\n \r\n \r\n </>\r\n    )\r\n}\r\n\r\nexport default Routes\r\n","E:\\IGSB2B_Admin\\src\\components\\sidebar\\Sidebar.jsx",[],"E:\\IGSB2B_Admin\\src\\pages\\dashboard\\Dashboard.jsx",["115"],"E:\\IGSB2B_Admin\\src\\pages\\users\\Users.jsx",["116","117","118","119","120"],"import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useQuery, useLazyQuery, useMutation, useSubscription } from '@apollo/client';\r\nimport {GET_CUSTOMERS_LIST} from '../../graphql/queries/query-gql-docs'\r\nimport { DELET_USER_MUTATION } from '../../graphql/mutations/muction_delet_customer_gql'\r\nimport UserDetailsPop from './UserDetailsPop';\r\nimport DeleteCustomerPopup from './DeleteCustomerPopup';\r\nimport EditCustomerPopup from './EditCustomerPopup';\r\nimport { Col, Pagination, Row } from 'react-bootstrap';\r\n\r\nfunction Users() {\r\n\r\nconst [customerDetails,setViewCustomerDetail] = useState()\r\nconst [modalShow, setModalShow] = useState(false);\r\nconst [deletecustomermodal,setDeleteCustomerModalShow] = useState(false);\r\nconst [editusermodel,setEditUserModel] = useState(false);\r\nconst [editcustomer,setEditcustome] = useState();\r\n\r\n\r\nconst [customerid,setCustomerId] = useState()\r\n\r\n    const { data } = useQuery(GET_CUSTOMERS_LIST, {\r\n        variables: {\r\n          pageRequest:{\r\n            pageNo: 1,\r\n            noOfRecords: 20,\r\n            emailPattern :\"\"\r\n          }\r\n        },\r\n        context: {\r\n          uri:'https://api.shifteasy.com/customer'\r\n        },\r\n        fetchPolicy: 'network-only'\r\n      })\r\n\r\n\r\nconsole.log(data);\r\n\r\n  //  console.log(data?.getCustomersByPage?.recordsCount);\r\n  //  const totalUserDatas = data?.getCustomersByPage?.recordsCount\r\n  //  const pages = Math.ceil(totalUserDatas/20)\r\n  //  console.log(pages);\r\n\r\n  // console.log(customerDetails);\r\n   \r\n// const handleSelectPage = (page) =>{\r\n// console.log(page);\r\n// }\r\n\r\n//    const getPageButton = () =>{\r\n//     let pagesArr = []\r\n//     let page = 1\r\n// while( page < 5 && page < pages ){\r\n// pagesArr.push(<Pagination.Item >{page}</Pagination.Item>)\r\n// }\r\n// return pagesArr;\r\n//    }\r\n\r\nconst month = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\r\n   \r\n   const  handleViewCustomerDetail = (value) =>{\r\n     console.log(value)\r\n    setModalShow(true);\r\n    setViewCustomerDetail(value);\r\n\r\n   }\r\n\r\n   const handleDeletePop = (e) => {\r\n    //  console.log(e);\r\n    setCustomerId(e)\r\n    setDeleteCustomerModalShow(true)\r\n    \r\n   }\r\n\r\nconst handleClickEditUser = (e) => {\r\n  setEditUserModel(true)\r\n  setEditcustome(e)\r\n}   \r\n\r\n    return (\r\n        <>\r\n<div className=\"ticket-history \">\r\n         \r\n         <div className=\"subheader-box ticket-edit\">\r\n      <h3 className=\"text-center \">USERS</h3>\r\n    </div>\r\n    <div className=\" h-cutom\">\r\n    <div className=\"container\">\r\n    <div className=\"history-content mt-3 mb-3\">\r\n        <div className=\"table-responsive\">\r\n        <table class=\"table table-striped table-hover table-borderless align-middle\">\r\n    <thead className=\"history-table-bg\">\r\n      <tr>\r\n        <th scope=\"col\">S.No</th>\r\n        <th scope=\"col\">Name</th>\r\n        <th scope=\"col\">Customer Id</th>\r\n        <th scope=\"col\">E-Mail</th>\r\n        <th scope=\"col\">Phone Number</th>\r\n        <th scope=\"col\">Created Date</th>\r\n        <th scope=\"col\">Country</th>\r\n        <th scope=\"col\">Delete User</th>\r\n        <th scope=\"col\">Edit User</th>\r\n        <th scope=\"col\">View User</th>\r\n\r\n  \r\n  \r\n      </tr>\r\n    </thead>\r\n \r\n \r\n    {\r\n        data?.getCustomersByPage?.pageData.map((value,index) =>{\r\n  \r\n            return(\r\n                <tbody>\r\n<tr key = {value?.email} >\r\n\r\n       <td>{index+1}</td>\r\n      <td>{value?.firstName}</td>\r\n      <td>{value?.customerId}</td>\r\n      <td>{value?.email}</td>\r\n      <td>{value?.primaryContactNumber}</td>\r\n      <td>{`${new Date(value?.createdAt).getDate()}/${month[new Date(value?.createdAt).getMonth()]}/${new Date(value?.createdAt).getFullYear()}`} </td>\r\n      <td>{value?.address?.country?.countryName?value?.address?.country?.countryName:\"Not Update\"}</td>\r\n      <td><button className='btn btn-danger' onClick={() => handleDeletePop(value?.customerId) }>Delete</button></td> \r\n      <td><button className='btn btn-primary' onClick={() => handleClickEditUser(value)}>Edit</button></td>\r\n      <td><button className='btn btn-primary' onClick={() => handleViewCustomerDetail(value)}>view</button></td>\r\n</tr>\r\n                </tbody>\r\n            )\r\n\r\n        } )                                     \r\n    }\r\n\r\n</table>\r\n\r\n        </div>\r\n\r\n    </div>\r\n    </div>\r\n    </div>\r\n    <Row>\r\n      <Col>\r\n    <Pagination>\r\n  <Pagination.First />\r\n  <Pagination.Prev />\r\n  {/* {\r\n    getPageButton()\r\n  }  */}\r\n  {/* <Pagination.Item active>{1}</Pagination.Item> */}\r\n  {\r\n\r\n  }\r\n\r\n  {/* <Pagination.Ellipsis /> */}\r\n\r\n  {/* <Pagination.Item>{10}</Pagination.Item>\r\n  <Pagination.Item>{11}</Pagination.Item>\r\n  <Pagination.Item >{12}</Pagination.Item>\r\n  <Pagination.Item>{13}</Pagination.Item>\r\n  <Pagination.Item disabled>{14}</Pagination.Item> */}\r\n\r\n  {/* <Pagination.Ellipsis /> */}\r\n  {/* <Pagination.Item>{20}</Pagination.Item> */}\r\n  <Pagination.Next />\r\n  <Pagination.Last />\r\n</Pagination>\r\n</Col>\r\n</Row>\r\n  \r\n    </div>\r\n    <UserDetailsPop show={modalShow} onHide={() => setModalShow(false)} CustomerDetails = {customerDetails}  />\r\n    <DeleteCustomerPopup   show={deletecustomermodal} onHide={() => setDeleteCustomerModalShow(false)} CustomerId  = {customerid} />\r\n    <EditCustomerPopup   show={editusermodel} onHide={() => setEditUserModel(false)} EditCustomerDetails = {editcustomer} />\r\n\r\n        </>         \r\n    )\r\n}\r\n\r\nexport default  Users\r\n","E:\\IGSB2B_Admin\\src\\pages\\events\\Events.js",["121"],"import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction Events() {\r\n    return (\r\n        <>\r\n        <h1>Events</h1>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Events\r\n","E:\\IGSB2B_Admin\\src\\redux\\store\\store.js",[],"E:\\IGSB2B_Admin\\src\\redux\\reducers\\index.js",[],"E:\\IGSB2B_Admin\\src\\redux\\reducers\\user-reducer.js",[],"E:\\IGSB2B_Admin\\src\\redux\\actions\\actionTypes.js",[],"E:\\IGSB2B_Admin\\src\\redux\\actions\\user.js",[],"E:\\IGSB2B_Admin\\src\\graphql\\mutations\\mutation-auth.js",[],"E:\\IGSB2B_Admin\\src\\graphql\\queries\\query-gql-docs.js",[],"E:\\IGSB2B_Admin\\src\\apolloClient.js",[],"E:\\IGSB2B_Admin\\src\\keycloak.js",[],"E:\\IGSB2B_Admin\\src\\pages\\settings\\Settings.js",["122"],"import { Button } from 'bootstrap';\r\nimport React from 'react';\r\nimport { useKeycloak } from '@react-keycloak/web';\r\n\r\nconst Settings = () =>{\r\n    const { keycloak } = useKeycloak();\r\n\r\n    const login = () => {\r\n        localStorage.removeItem('persist:root');\r\n        keycloak.login();\r\n      };\r\n    \r\n      const logout = () => {\r\n        localStorage.removeItem('persist:root');\r\n        keycloak.logout();\r\n      };\r\n    \r\n    \r\n  \r\n    return(\r\n        <>\r\n          {keycloak && !keycloak.authenticated\r\n          ?(<button  onClick={() => login()} >login</button>)\r\n          :(<button  onClick={() => logout()} >logout</button>)\r\n          \r\n          }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Settings","E:\\IGSB2B_Admin\\src\\pages\\users\\UserDetailsPop.js",["123","124","125","126","127"],"import React,{useState} from \"react\";\r\nimport { Button, Col, Container, Modal, Row } from \"react-bootstrap\";\r\nimport './UserDetailsPop.css'\r\nimport {GET_Ticket_QUERY} from \"../../graphql/queries/query-gql-docs\"\r\nimport { useQuery } from '@apollo/client';\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n// import { faDownload, faEye, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\n\r\n\r\nconst UserDetailsPop = (props) => {\r\n\r\n    const values = [true, 'sm-down', 'md-down', 'lg-down', 'xl-down', 'xxl-down'];\r\n    const [fullscreen, setFullscreen] = useState(true);\r\n\r\n// console.log(props.CustomerDetails);\r\n\r\nconst { data } = useQuery(GET_Ticket_QUERY, {\r\n    variables: {\r\n      customerId:props?.CustomerDetails?.customerId\r\n    },\r\n    context: {\r\n      uri:process.env.REACT_APP_PAYMENT_URL\r\n    },\r\n    fetchPolicy: 'network-only'\r\n  })\r\n// console.log(data);\r\nconst month = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\r\n\r\n return(\r\n    <>\r\n    <Modal {...props} aria-labelledby=\"contained-modal-title-vcenter\" size='xl'> \r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\" style={{textTransform: 'uppercase'}}>\r\n        CustomerDetails\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body className=\"show-grid\">\r\n          <Row>\r\n              <Col><h6>First Name</h6></Col>\r\n              <Col>:</Col>\r\n              <Col><p>{props?.CustomerDetails?.firstName}</p></Col>\r\n\r\n          </Row>\r\n          <Row>\r\n              <Col><h6>Last Name</h6></Col>\r\n              <Col>:</Col>\r\n              <Col><p>{props?.CustomerDetails?.lastName}</p></Col>\r\n\r\n          </Row>\r\n\r\n          <Row>\r\n              <Col><h6>User Id</h6></Col>\r\n              <Col>:</Col>\r\n              <Col><p>{props?.CustomerDetails?.customerId}</p></Col>\r\n\r\n          </Row>\r\n\r\n          <Row>\r\n              <Col><h6>E-Mail</h6></Col>\r\n              <Col>:</Col>\r\n              <Col><p>{props?.CustomerDetails?.email}</p></Col>\r\n\r\n          </Row>\r\n\r\n          <Row>\r\n              <Col><h6>Phone Number</h6></Col>\r\n              <Col>:</Col>\r\n              <Col><p>{props?.CustomerDetails?.primaryContactNumber}</p></Col>\r\n\r\n          </Row>\r\n          <Row>\r\n              <Col><h6>whatsappNumber</h6></Col>\r\n              <Col>:</Col>\r\n              <Col><p>{props?.CustomerDetails?.whatsappNumber ? props?.CustomerDetails?.whatsappNumber : \"Null\"}</p></Col>\r\n\r\n          </Row>\r\n          <Row>\r\n              <Col><h6>Aadhaar Number</h6></Col>\r\n              <Col>:</Col>\r\n              <Col><p>{props?.CustomerDetails?.aadhaarNumber ? props?.CustomerDetails?.aadhaarNumber : \"Null\"}</p></Col>\r\n\r\n          </Row>\r\n          <Row>\r\n              <Col><h6>Pan Number</h6></Col>\r\n              <Col>:</Col>\r\n              <Col><p>{props?.CustomerDetails?.panNumber ? props?.CustomerDetails?.panNumber : \"Null\"}</p></Col>\r\n\r\n          </Row>\r\n          <Row>\r\n              <Col><h6>Passport Number</h6></Col>\r\n              <Col>:</Col>\r\n              <Col><p>{props?.CustomerDetails?.passportNumber ? props?.CustomerDetails?.passportNumber : \"Null\"}</p></Col>\r\n\r\n          </Row>\r\n       \r\n\r\n\r\n\r\n          <Row>\r\n              <Col><h6>Driving Licence No</h6></Col>\r\n              <Col>:</Col>\r\n              <Col><p>{props?.CustomerDetails?.drivingLicenceNumber ? props?.CustomerDetails?.drivingLicenceNumber: \"Null\"}</p></Col>\r\n\r\n          </Row>\r\n          <Row>\r\n              <Col><h6>Address Line 1</h6></Col>\r\n              <Col>:</Col>\r\n              <Col><p>{props?.CustomerDetails?.address?.addressLine1 ? props?.CustomerDetails?.address?.addressLine1 : \"Null\"}</p></Col>\r\n\r\n          </Row>\r\n\r\n\r\n          <Row>\r\n              <Col><h6>Address Line 2</h6></Col>\r\n              <Col>:</Col>\r\n              <Col><p>{props?.CustomerDetails?.address?.addressLine2 ? props?.CustomerDetails?.address?.addressLine2 : \"Null\"}</p></Col>\r\n\r\n          </Row>\r\n          <Row>\r\n              <Col><h6>City</h6></Col>\r\n              <Col>:</Col>\r\n              <Col><p>{props?.CustomerDetails?.address?.city?.cityName ? props?.CustomerDetails?.address?.city?.cityName : \"Null\"}</p></Col>\r\n\r\n          </Row>\r\n\r\n          <Row>\r\n              <Col><h6>State</h6></Col>\r\n              <Col>:</Col>\r\n              <Col><p>{props?.CustomerDetails?.address?.state?.stateName ? props?.CustomerDetails?.address?.state?.stateName : \"Null\"}</p></Col>\r\n\r\n          </Row>\r\n          <Row>\r\n              <Col><h6>Country</h6></Col>\r\n              <Col>:</Col>\r\n              <Col><p>{props?.CustomerDetails?.address?.country?.countryName ? props?.CustomerDetails?.address?.country?.countryName : \"Null\"}</p></Col>\r\n\r\n          </Row>\r\n          <Row>\r\n              <Col><h6>Postal Code</h6></Col>\r\n              <Col>:</Col>\r\n              <Col><p>{props?.CustomerDetails?.address?.postalCode ? props?.CustomerDetails?.address?.postalCode : \"Null\"}</p></Col>\r\n\r\n          </Row>\r\n\r\n\r\n          <Row>\r\n          <h2>TicketDetails</h2>\r\n         { data?.getTicketList.length ? \r\n(          <Col>\r\n          <table class=\"table table-striped table-hover table-borderless align-middle\">\r\n      <thead className=\"history-table-bg\">\r\n        <tr>\r\n          <th scope=\"col\">Product Description</th>\r\n          <th scope=\"col\">Ticket Type</th>\r\n          <th scope=\"col\">Status</th>\r\n          <th scope=\"col\">Order Date</th>\r\n          <th scope=\"col\">Order Amount</th>\r\n          {/* <th scope=\"col\">Cancel Ticket</th>\r\n          <th scope=\"col\">Download</th>\r\n          <th scope=\"col\">View Ticket</th> */}\r\n    \r\n    \r\n        </tr>\r\n      </thead>\r\n\r\n  {\r\n  \r\n  data?.getTicketList.map(value =>{\r\n    \r\n    return(\r\n    \r\n      <tbody>\r\n      <tr >\r\n        <td>{value?.description}</td>\r\n        <td className=\"text-nowrap\">{ JSON.parse(value?.metadata)?.quantity}</td>\r\n\r\n        <td className=\"text-nowrap\"><i class=\"fas fa-square text-success me-2 \"></i>Booked</td>\r\n        {/* <td className=\"text-nowrap\"><i class=\"fas fa-pound-sign\"></i> 600</td> */}\r\n        {/* <td>#2470299049 <br/> 24 Dec 21 3:37 PM</td> */}\r\n\r\n        <td>{`${new Date(value?.created).getDate()}/${month[new Date(value?.created).getMonth()]}/${new Date(value?.created).getFullYear()}`} </td>\r\n        <td className=\"text-nowrap\"><i class=\"fas fa-pound-sign\"></i>{value?.amount}</td>\r\n        {/* <td className=\"text-nowrap\"> <button className=\"btn btn-outline-danger\"><FontAwesomeIcon icon={faTimes}/> Cancel Ticket</button></td>\r\n        <td className=\"text-nowrap\"> <button className=\"btn btn-outline\" ><FontAwesomeIcon icon={faDownload}/> Download</button></td>\r\n        <td className=\"text-nowrap\"> <button className=\"btn btn-outline\" onClick={() => handleTicketView(value)} ><FontAwesomeIcon icon={faEye}/> View Ticket</button></td> */}\r\n  \r\n      </tr>\r\n      </tbody>\r\n\r\n    )\r\n  })\r\n}\r\n  </table>\r\n\r\n          \r\n          </Col>\r\n)  \r\n:\r\n(\r\n<>\r\n<h1>Please Buy The Tickets Now !!!</h1>\r\n</>\r\n)\r\n}\r\n\r\n</Row>\r\n      </Modal.Body>\r\n      </Modal>\r\n    </>\r\n)\r\n}\r\n\r\nexport default UserDetailsPop ","E:\\IGSB2B_Admin\\src\\graphql\\mutations\\muction_delet_customer_gql.js",[],"E:\\IGSB2B_Admin\\src\\pages\\users\\DeleteCustomerPopup.js",["128","129","130","131"],"import React from 'react'\r\nimport { Button, Col, Modal, Row } from 'react-bootstrap'\r\nimport { useQuery, useLazyQuery, useMutation } from '@apollo/client';\r\nimport { DELET_USER_MUTATION } from '../../graphql/mutations/muction_delet_customer_gql'\r\nimport {GET_CUSTOMERS_LIST} from '../../graphql/queries/query-gql-docs'\r\n\r\nconst DeleteCustomerPopup = (props) => {\r\n    \r\n    const [deleteCustomer, { loading: submittingUserProfile }] = useMutation(DELET_USER_MUTATION, {\r\n        context: {\r\n            uri: process.env.REACT_APP_CUSTOMER_URL\r\n        }\r\n    });\r\n    \r\n    const handleDeletCutomer = (e) => {\r\n        deleteCustomer({\r\n          variables: {\r\n            customerId: props.CustomerId\r\n          },\r\n          refetchQueries:[GET_CUSTOMERS_LIST]\r\n          })\r\n\r\n          return props.onHide()\r\n        \r\n       }\r\n      \r\n    return (\r\n    <>\r\n     <Modal\r\n      {...props}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n        \r\n      <Modal.Body>\r\n        <h4>Delete Message?</h4>\r\n        <Row >\r\n          <div className=\"button-container d-flex justify-content-between\">\r\n            <Button onClick={props.onHide}>Cancel</Button>\r\n            <Button className='btn btn-danger' onClick={() => handleDeletCutomer()}>Delete</Button>\r\n            </div>\r\n        </Row>\r\n       \r\n      </Modal.Body>\r\n    </Modal>\r\n    </>\r\n)\r\n}\r\n\r\nexport default DeleteCustomerPopup","E:\\IGSB2B_Admin\\src\\pages\\users\\EditCustomerPopup.js",["132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148"],"import React,{useState} from \"react\";\r\nimport { Button, Col, Container, Modal, Row, Toast, ToastContainer } from \"react-bootstrap\";\r\nimport './EditCustomerPopup.css';\r\nimport {GET_Ticket_QUERY} from \"../../graphql/queries/query-gql-docs\";\r\nimport {UPDATE_USER_PROFILE_MUTATION} from \"../../graphql/mutations/mutation-edit-user-gql\";\r\nimport {GET_CUSTOMER_QUERY} from \"../../graphql/queries/query-gql-docs\"\r\nimport { useQuery, useMutation, useLazyQuery } from '@apollo/client';\r\nimport {GET_CITIES_QUERY} from '../../graphql/queries/query-gql-docs';\r\nimport {GET_STATES_QUERY} from '../../graphql/queries/query-gql-docs';\r\nimport {GET_COUNTRIES_QUERY} from '../../graphql/queries/query-gql-docs';\r\nimport * as yup from 'yup';\r\nimport { useFormik } from 'formik';\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport { Typeahead } from 'react-bootstrap-typeahead';\r\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n// import { faDownload, faEye, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\n\r\nconst validationSchema = yup.object({\r\n    firstName: yup\r\n        .string()\r\n        .required('Please enter your First Name'),\r\n    lastName: yup\r\n        .string(),\r\n    email: yup\r\n        .string(),\r\n    mobileNumber: yup\r\n        .string(),\r\n    whatsappNumber:yup\r\n        .string(),     \r\n    addressLine1: yup\r\n        .string()\r\n        // .required('Please enter your house no./apartment name/street name')\r\n        ,\r\n    addressLine2: yup\r\n        .string()\r\n        // .required('Please enter your locality name/area name')\r\n        ,\r\n    country: yup\r\n        .number()\r\n        .min(1, 'Please enter your country name'),\r\n    state: yup\r\n        .number()\r\n        .min(1, 'Please enter your state/county/region name'),\r\n    city: yup\r\n        .number()\r\n        .min(1, 'Please enter your city name'),\r\n    aadhaarNumber:yup\r\n        .string(),\r\n    panNumber:yup\r\n        .string(),\r\n    passportNumber:yup\r\n        .string(),\r\n    drivingLicenceNumber:yup\r\n        .string(),\r\n    postalCode: yup\r\n        .string()\r\n        \r\n        \r\n});\r\n\r\n\r\n\r\n\r\nconst EditCustomerPopup = (props) => {\r\n\r\n    const values = [true, 'sm-down', 'md-down', 'lg-down', 'xl-down', 'xxl-down'];\r\n    const [fullscreen, setFullscreen] = useState(true);\r\n    // console.log(props.CustomerDetails);\r\n    const user = props.EditCustomerDetails;\r\n    // const dispatch = useDispatch();\r\n    // const history = useHistory();\r\n    const [selectedCountry, setSelectedCountry] = React.useState([]);\r\n    const countryRef = React.createRef();\r\n    const [showToast, setShowToast] = React.useState(false);\r\n    const [message,setMessage]= React.useState(\"\")\r\n    const handleCloseToast = () => setShowToast(false);\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            firstName: null,\r\n            lastName: '',\r\n            email: '',\r\n            mobileNumber: '',\r\n            whatsappNumber:'',\r\n            addressLine1: '',\r\n            addressLine2: '',\r\n            country: 0,\r\n            state: 0,\r\n            city: 0,\r\n            aadhaarNumber:'',\r\n            panNumber:'',\r\n            passportNumber:'',\r\n            drivingLicenceNumber:'',\r\n            postalCode: '',\r\n        },\r\n        validationSchema: validationSchema,\r\n        onSubmit: (values) => {\r\n            console.log(\"value\",values);\r\n            updateCustomer({\r\n                variables: {\r\n                    updateData: {\r\n                        customerId: user.customerId || null,\r\n                        firstName: values.firstName || null,\r\n                        lastName: values.lastName || null,\r\n                        email: values.email || null,\r\n                        primaryContactNumber: values.mobileNumber || null,\r\n                        whatsappNumber: values.whatsappNumber || null,\r\n\r\n                        address: {\r\n                            addressLine1: values.addressLine1 || null,\r\n                            addressLine2: values.addressLine2 || null,\r\n                            countryId: values.country,\r\n                            stateId: values.state,\r\n                            cityId: values.city,\r\n                            postalCode: values.postalCode\r\n                        },\r\n                        aadhaarNumber:values.aadhaarNumber || null,\r\n                        panNumber:values.panNumber || null,\r\n                        passportNumber:values.passportNumber || null,\r\n                        drivingLicenceNumber:values.drivingLicenceNumber || null,\r\n            \r\n            \r\n                    }\r\n                },\r\n                refetchQueries: [{\r\n                    query: GET_CUSTOMER_QUERY,\r\n                    variables: {\r\n                        customerId: user?.keycloakUserId\r\n                    },\r\n                    context: { uri: process.env.REACT_APP_CUSTOMER_URL },\r\n                    fetchPolicy: 'network-only'\r\n                }]\r\n            })\r\n             .then(() => {\r\n                formik.setSubmitting(false);\r\n                 setMessage(\"User Updated Done\")\r\n                setShowToast(true);\r\n            //     if (data?.updateCustomer) {\r\n                    // dispatch(userLogin(user?.keycloakUserId))\r\n                        // .then(() => {\r\n                        // }).then(() => {\r\n                        //     history.push({\r\n                        //         pathname: '/profile',\r\n                        //         state: { profileUpdated: true }\r\n                        //     });\r\n                        // });\r\n            //     }\r\n             })\r\n        }\r\n    });\r\n    const [updateCustomer, { loading: submittingUserProfile }] = useMutation(UPDATE_USER_PROFILE_MUTATION, {\r\n        context: {\r\n            uri: process.env.REACT_APP_CUSTOMER_URL\r\n        }\r\n    });\r\n    const { loading: fetchingCountries, data: countries } = useQuery(GET_COUNTRIES_QUERY, {\r\n        context: {\r\n            uri: process.env.REACT_APP_LOCATION_URL\r\n        }\r\n    });\r\n\r\n    const [getStates, { loading: fetchingStates, data: states }] = useLazyQuery(GET_STATES_QUERY, {\r\n        context: {\r\n            uri: process.env.REACT_APP_LOCATION_URL\r\n        }\r\n    });\r\n\r\n    const [getCities, { loading: fetchingCities, data: cities }] = useLazyQuery(GET_CITIES_QUERY, {\r\n        context: {\r\n            uri: process.env.REACT_APP_LOCATION_URL\r\n        }\r\n    });\r\n\r\n\r\n\r\n    const handleMobileNumberChange = (value, data, event, formattedValue) => {\r\n        formik.setFieldValue('countryCode', data.dialCode);\r\n        formik.setFieldValue('mobileNumber', formattedValue);\r\n    };\r\n\r\n    const handleWhatsappNumber = (value, data, event, formattedValue) => {\r\n        formik.setFieldValue('countryCode', data.dialCode);\r\n        formik.setFieldValue('whatsappNumber', formattedValue);\r\n    };\r\n\r\n    const handleCountryChange = (selected) => {\r\n        if (selected && selected.length) {\r\n            setSelectedCountry(selected);\r\n            formik.setFieldValue('country', selected[0].countryId);\r\n\r\n            getStates({\r\n                variables: {\r\n                    countryId: selected[0].countryId\r\n                }\r\n            });\r\n\r\n            getCities({\r\n                variables: {\r\n                    citySearchRequest: {\r\n                        countryId: selected[0].countryId,\r\n                        searchString: \"\"\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleCountryBlur = () => {\r\n        formik.setTouched({ ['country']: true, ...formik.touched });\r\n\r\n        if (!selectedCountry.length || countryRef.current.getInput().value !== selectedCountry[0]?.countryName) {\r\n            countryRef.current.clear();\r\n        }\r\n    }\r\n\r\n    const handleStateChange = (selected) => {\r\n        formik.setFieldValue('state', selected[0].stateId);\r\n    };\r\n\r\n    const handleCityChange = (selected) => {\r\n        formik.setFieldValue('city', selected[0].cityId);\r\n    }\r\n    // const countryToFlag = (isoCode) => {\r\n    //     return typeof String.fromCodePoint !== 'undefined'\r\n    //         ? isoCode\r\n    //             .toUpperCase()\r\n    //             .replace(/./g, (char) => String.fromCodePoint(char.charCodeAt(0) + 127397))\r\n    //         : isoCode;\r\n    // }\r\n\r\n    React.useEffect(() => {\r\n        formik.setFieldValue('firstName', user?.firstName || '');\r\n        formik.setFieldValue('lastName', user?.lastName || '');\r\n        formik.setFieldValue('email', user?.email || '');\r\n        formik.setFieldValue('mobileNumber', user?.primaryContactNumber || '');\r\n        formik.setFieldValue('whatsappNumber', user?.whatsappNumber || '');\r\n        formik.setFieldValue('addressLine1', user?.address?.addressLine1 || '');\r\n        formik.setFieldValue('addressLine2', user?.address?.addressLine2 || '');\r\n        formik.setFieldValue('country', user?.address?.country?.countryId || 0);\r\n        formik.setFieldValue('state', user?.address?.state?.stateId || 0);\r\n        formik.setFieldValue('city', user?.address?.city?.cityId || 0);\r\n        formik.setFieldValue('postalCode', user?.address?.postalCode || '');\r\n        formik.setFieldValue('aadhaarNumber', user?.aadhaarNumber || '');\r\n        formik.setFieldValue('panNumber', user?.panNumber || '');\r\n        formik.setFieldValue('passportNumber', user?.passportNumber || '');\r\n        formik.setFieldValue('drivingLicenceNumber', user?.drivingLicenceNumber || '');\r\n\r\n\r\n    }, [user]);\r\n\r\n const month = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\r\n return(\r\n    <>\r\n    <Modal {...props} aria-labelledby=\"contained-modal-title-vcenter\" size='xl'> \r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\" style={{textTransform: 'uppercase'}}>\r\n        update Customer Details\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body className=\"show-grid\">\r\n      <div className=\"card-body\">\r\n                    <div className = \"row justify-content-center\">\r\n\r\n                        <div className=\"col-md-8 col-xs-12 col-sm-12\">\r\n                    <form className=\"contact-form \" id = \"outreachform\"  noValidate  onSubmit={formik.handleSubmit} >\r\n\r\n                 \r\n                    <Row>\r\n                        <Col>\r\n                        <div className=\"form-group\">\r\n                                    <label for=\"exampleInputPassword1\">First Name</label>\r\n                                    <input type=\"text\" className=\"form-control outreach \" name=\"firstName\" id=\"firstName\" placeholder=\"First Name\"\r\n                                        value={formik.values.firstName}\r\n                                        onChange={formik.handleChange}\r\n                                        onBlur={formik.handleBlur}\r\n\r\n                                    />\r\n                                    {formik.touched.firstName &&\r\n                                        (<div className=\"invalid\">\r\n                                            {formik.errors.firstName} \r\n                                         </div>)}\r\n\r\n                                </div>\r\n                        </Col>\r\n                        <Col>\r\n                        <div className=\"form-group\">\r\n                                    <label for=\"exampleInputPassword1\">Last Name</label>\r\n                                    <input type=\"text\" className=\"form-control outreach\" name=\"lastName\" id=\"lastName\" placeholder=\"Last Name\"\r\n                                        value={formik.values.lastName}\r\n                                        onChange={formik.handleChange}\r\n                                        onBlur={formik.handleBlur}\r\n\r\n                                    />\r\n                                    {formik.touched.lastName &&\r\n                                        (<div className=\"invalid\">\r\n                                            {formik.errors.lastName}\r\n                                        </div>)}\r\n                                </div>\r\n\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                           <Col>\r\n                           <div  className=\"form-group\">\r\n                                    <label   for=\"exampleFormControlInput1\">Mobile Number</label>\r\n                                       <PhoneInput\r\n                                            //  className=\"outreach form-group\"\r\n                                            //  className=\"form-control outreach\"\r\n                                               country={'in'}\r\n                                               value={formik.values.mobileNumber}\r\n                                               onChange={handleMobileNumberChange}\r\n                                               onBlur={() => formik.setTouched({ ['mobileNumber']: true, ...formik.touched })}\r\n                                            //    inputClass=\"phoneinput\"\r\n                                            //    dropdownClass=\"phoneinput\"\r\n                                             \r\n                                       />\r\n\r\n\r\n                                    {formik.touched.mobileNumber &&\r\n                                        (<div className=\"invalid\">\r\n                                            {formik.errors.mobileNumber}\r\n                                        </div>)} \r\n\r\n                                </div>\r\n\r\n                           </Col>\r\n                           \r\n                           <Col>\r\n                           <div  className=\"form-group\">\r\n                                    <label   for=\"exampleFormControlInput1\">Whatsapp Number</label>\r\n                                             <PhoneInput\r\n                                             className=\"outreach form-group\"\r\n                                               country={'in'}\r\n                                               value={formik.values.whatsappNumber}\r\n                                               onChange={handleWhatsappNumber}\r\n                                              onBlur={() => formik.setTouched({ ['whatsappNumber']: true, ...formik.touched })}\r\n                                              inputClass=\"phoneinput\"\r\n                                              dropdownClass=\"phoneinput\"\r\n                                             \r\n                                            \r\n                                       />\r\n\r\n\r\n                                    {formik.touched.whatsappNumber &&\r\n                                        (<div className=\"invalid\">\r\n                                            {formik.errors.whatsappNumber}\r\n                                        </div>)}\r\n\r\n                                </div>\r\n\r\n                           </Col>\r\n\r\n                    </Row>\r\n\r\n                    <Row>\r\n                      <Col>\r\n                      <div className=\"form-group\">\r\n                                    <label for=\"exampleFormControlInput1\">Email Address</label>\r\n                                    <input type=\"email\" className=\"form-control outreach\" name=\"email\" id=\"email\" placeholder=\"name@example.com\"\r\n                                        value={formik.values.email}\r\n                                        onChange={formik.handleChange}\r\n                                        onBlur={formik.handleBlur}\r\n\r\n                                    />\r\n                                    {formik.touched.email &&\r\n                                        (<div className=\"invalid\">\r\n                                            {formik.errors.email}\r\n                                        </div>)}\r\n\r\n                      </div>\r\n\r\n\r\n                      </Col>\r\n\r\n                      <Col>\r\n                      <div className=\"form-group\">\r\n                                    <label for=\"exampleInputPassword1\">Address Line 1</label>\r\n                                    <input type=\"text\" className=\"form-control outreach\" id=\"addressLine1\" name=\"addressLine1\" placeholder=\"Address Line 1\"\r\n                                        value={formik.values.addressLine1}\r\n                                        onChange={formik.handleChange}\r\n                                        onBlur={formik.handleBlur}\r\n\r\n                                    />\r\n                                    {formik.touched.addressLine1 &&\r\n                                        (<div className=\"invalid\">\r\n                                            {formik.errors.addressLine1}\r\n                                        </div>)}\r\n\r\n                                </div>\r\n\r\n\r\n                      \r\n                      </Col>\r\n\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                        <div className=\"form-group\">\r\n                                    <label for=\"exampleInputPassword1\">Address Line 2</label>\r\n                                    <input type=\"text\" className=\"form-control outreach\" id=\"addressLine2\" name=\"addressLine2\" placeholder=\"Address Line 2\"\r\n                                        value={formik.values.addressLine2}\r\n                                        onChange={formik.handleChange}\r\n                                        onBlur={formik.handleBlur}\r\n\r\n                                    />\r\n                                    {formik.touched.addressLine2 &&\r\n                                        (<div className=\"invalid\">\r\n                                            {formik.errors.addressLine2}\r\n                                        </div>)}\r\n\r\n                                </div>\r\n\r\n                        </Col>\r\n                        <Col>\r\n                        <div className=\"form-group\">\r\n                                    <label for=\"exampleInputPassword1\">Country</label>\r\n                                    <Typeahead\r\n                                        id=\"country\"\r\n                                        name=\"country\"\r\n                                        ref={countryRef}\r\n                                        labelKey=\"countryName\"\r\n                                       \r\n                                         defaultInputValue={user?.address?.country?.countryName || ''}\r\n                                       \r\n                                       \r\n                                        onChange={handleCountryChange}\r\n                                        onBlur={handleCountryBlur}\r\n                                        options={countries?.getCountries || []}\r\n                                        placeholder=\"Country\"\r\n                                        \r\n                                        />\r\n                                    {formik.touched.country &&\r\n                                        (<div className=\"invalid\">\r\n                                            {formik.errors.country}\r\n                                        </div>)}\r\n\r\n                                </div>\r\n\r\n\r\n                        </Col>\r\n\r\n\r\n\r\n                    </Row>\r\n                    <Row>\r\n                    <Col>\r\n                        <div className=\"form-group\">\r\n                                    <label for=\"exampleInputPassword1\">State</label>\r\n                                    <Typeahead\r\n                                        id=\"state\"\r\n                                        name=\"state\"\r\n                                        labelKey=\"stateName\"\r\n                                         defaultInputValue={user?.address?.state?.stateName || ''}\r\n                                        onChange={handleStateChange}\r\n                                        onBlur={() => formik.setTouched({ ['state']: true, ...formik.touched })}\r\n                                        options={states?.getStatesByCountry || []}\r\n                                        placeholder=\"State\"\r\n                                         />\r\n                                    {formik.touched.state &&\r\n                                        (<div className=\"invalid\">\r\n                                            {formik.errors.state}\r\n                                        </div>)}\r\n                                </div>\r\n\r\n                        </Col>\r\n\r\n                        <Col>\r\n                        <div className=\"form-group\">\r\n                                    <label for=\"exampleInputPassword1\">City</label>\r\n                                    <Typeahead\r\n                                        id=\"city\"\r\n                                        name=\"city\"\r\n                                        labelKey=\"cityName\"\r\n                                        defaultInputValue={user?.address?.city?.cityName || ''}\r\n                                        onChange={handleCityChange}\r\n                                        onBlur={() => formik.setTouched({ ['city']: true, ...formik.touched })}\r\n                                        options={cities?.getCitySuggestions || []}\r\n                                        placeholder=\"City\"\r\n                                        \r\n                                        />\r\n                                     {formik.touched.city &&\r\n                                        (<div className=\"invalid\">\r\n                                            {formik.errors.city}\r\n                                        </div>)}\r\n \r\n                                </div>\r\n\r\n                        </Col>\r\n\r\n\r\n\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                        <div className=\"form-group\">\r\n                                    <label for=\"exampleInputPassword1\">Postal Code</label>\r\n                                    <input type=\"text\" className=\"form-control outreach \" name=\"postalCode\" id=\"postalCode\" placeholder=\"Postal Code\"\r\n                                        value={formik.values.postalCode}\r\n                                        onChange={formik.handleChange}\r\n                                        onBlur={formik.handleBlur}\r\n\r\n                                    />\r\n                                    {formik.touched.postalCode &&\r\n                                        (<div className=\"invalid\">\r\n                                            {formik.errors.postalCode} \r\n                                         </div>)}\r\n\r\n                                </div>\r\n\r\n                        </Col>\r\n                        <Col>\r\n                        <div className=\"form-group\">\r\n                                    <label for=\"exampleInputPassword1\">Driving Licence Number</label>\r\n                                    <input type=\"text\" className=\"form-control outreach\" name=\"drivingLicenceNumber\" id=\"drivingLicenceNumber\" placeholder=\"Driving Licence Number\"\r\n                                        value={formik.values.drivingLicenceNumber}\r\n                                        onChange={formik.handleChange}\r\n                                        onBlur={formik.handleBlur}\r\n\r\n                                    />\r\n                                    {formik.touched.drivingLicenceNumber &&\r\n                                        (<div className=\"invalid\">\r\n                                            {formik.errors.drivingLicenceNumber}\r\n                                        </div>)}\r\n                                </div>\r\n\r\n                        </Col>\r\n\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col>\r\n                        <div className=\"form-group\">\r\n                                    <label for=\"exampleInputPassword1\">Aadhaar Number</label>\r\n                                    <input type=\"text\" className=\"form-control outreach \" name=\"aadhaarNumber\" id=\"aadhaarNumber\" placeholder=\"Aadhaar Number\"\r\n                                        value={formik.values.aadhaarNumber}\r\n                                        onChange={formik.handleChange}\r\n                                        onBlur={formik.handleBlur}\r\n\r\n                                    />\r\n                                    {formik.touched.aadhaarNumber &&\r\n                                        (<div className=\"invalid\">\r\n                                            {formik.errors.aadhaarNumber} \r\n                                         </div>)}\r\n\r\n                                </div>\r\n                        </Col>\r\n                        <Col>\r\n                        <div className=\"form-group\">\r\n                                    <label for=\"exampleInputPassword1\">Pan Number</label>\r\n                                    <input type=\"text\" className=\"form-control outreach\" name=\"panNumber\" id=\"panNumber\" placeholder=\"Pan Numbe\"\r\n                                        value={formik.values.panNumber}\r\n                                        onChange={formik.handleChange}\r\n                                        onBlur={formik.handleBlur}\r\n\r\n                                    />\r\n                                    {formik.touched.panNumber &&\r\n                                        (<div className=\"invalid\">\r\n                                            {formik.errors.panNumber}\r\n                                        </div>)}\r\n                                </div>\r\n\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                        <div className=\"form-group\">\r\n                                    <label for=\"exampleInputPassword1\">Passport Number</label>\r\n                                    <input type=\"text\" className=\"form-control outreach \" name=\"passportNumber\" id=\"passportNumber\" placeholder=\"Passport Number\"\r\n                                        value={formik.values.passportNumber}\r\n                                        onChange={formik.handleChange}\r\n                                        onBlur={formik.handleBlur}\r\n\r\n                                    />\r\n                                    {formik.touched.passportNumber &&\r\n                                        (<div className=\"invalid\">\r\n                                            {formik.errors.passportNumber}\r\n                                        </div>)}\r\n\r\n                                </div>\r\n                        </Col>\r\n                        <Col></Col>\r\n                    </Row>\r\n\r\n                    <div className=\"button-container d-flex justify-content-between\">\r\n                            {/* <button type=\"button\" className=\"btn btn-red-header shadow my-2 d-block\" disabled={formik.isSubmitting}\r\n                              >\r\n                                Back\r\n                            </button> */}\r\n                            <button type=\"submit\" className=\"btn btn-success shadow my-2 d-block\" disabled={formik.isSubmitting}>\r\n                                {formik.isSubmitting && (<span className=\"spinner-border spinner-border-sm mr-1\" role=\"status\" aria-hidden=\"true\"></span>)}\r\n                                Submit\r\n                            </button>\r\n                            <button  className=\"btn btn-danger shadow my-2 d-block \" onClick={() =>props.onHide()}> Cancel </button>\r\n                        </div>\r\n\r\n\r\n                    </form>\r\n                    </div>\r\n                    </div>\r\n            </div>\r\n            <ToastContainer position=\"top-center\">\r\n                                    <Toast show={showToast} onClose={handleCloseToast} autohide>\r\n                                        <Toast.Body>{message}</Toast.Body>\r\n                                    </Toast>\r\n             </ToastContainer>\r\n      </Modal.Body>\r\n      </Modal>\r\n    </>\r\n)\r\n}\r\n\r\nexport default EditCustomerPopup","E:\\IGSB2B_Admin\\src\\graphql\\mutations\\mutation-edit-user-gql.js",[],"E:\\IGSB2B_Admin\\src\\pages\\add_new_user\\AddNewUser.js",["149","150","151","152","153","154","155","156"],"E:\\IGSB2B_Admin\\src\\graphql\\mutations\\mutation-gql-docs.js",[],{"ruleId":"157","severity":1,"message":"158","line":40,"column":7,"nodeType":"159","messageId":"160","endLine":40,"endColumn":16},{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","replacedBy":"164"},{"ruleId":"157","severity":1,"message":"165","line":16,"column":11,"nodeType":"159","messageId":"160","endLine":16,"endColumn":17},{"ruleId":"157","severity":1,"message":"166","line":2,"column":10,"nodeType":"159","messageId":"160","endLine":2,"endColumn":14},{"ruleId":"157","severity":1,"message":"166","line":2,"column":10,"nodeType":"159","messageId":"160","endLine":2,"endColumn":14},{"ruleId":"157","severity":1,"message":"167","line":3,"column":20,"nodeType":"159","messageId":"160","endLine":3,"endColumn":32},{"ruleId":"157","severity":1,"message":"168","line":3,"column":34,"nodeType":"159","messageId":"160","endLine":3,"endColumn":45},{"ruleId":"157","severity":1,"message":"169","line":3,"column":47,"nodeType":"159","messageId":"160","endLine":3,"endColumn":62},{"ruleId":"157","severity":1,"message":"170","line":5,"column":10,"nodeType":"159","messageId":"160","endLine":5,"endColumn":29},{"ruleId":"157","severity":1,"message":"166","line":2,"column":10,"nodeType":"159","messageId":"160","endLine":2,"endColumn":14},{"ruleId":"157","severity":1,"message":"171","line":1,"column":10,"nodeType":"159","messageId":"160","endLine":1,"endColumn":16},{"ruleId":"157","severity":1,"message":"171","line":2,"column":10,"nodeType":"159","messageId":"160","endLine":2,"endColumn":16},{"ruleId":"157","severity":1,"message":"172","line":2,"column":23,"nodeType":"159","messageId":"160","endLine":2,"endColumn":32},{"ruleId":"157","severity":1,"message":"173","line":14,"column":11,"nodeType":"159","messageId":"160","endLine":14,"endColumn":17},{"ruleId":"157","severity":1,"message":"174","line":15,"column":12,"nodeType":"159","messageId":"160","endLine":15,"endColumn":22},{"ruleId":"157","severity":1,"message":"175","line":15,"column":24,"nodeType":"159","messageId":"160","endLine":15,"endColumn":37},{"ruleId":"157","severity":1,"message":"176","line":2,"column":18,"nodeType":"159","messageId":"160","endLine":2,"endColumn":21},{"ruleId":"157","severity":1,"message":"177","line":3,"column":10,"nodeType":"159","messageId":"160","endLine":3,"endColumn":18},{"ruleId":"157","severity":1,"message":"167","line":3,"column":20,"nodeType":"159","messageId":"160","endLine":3,"endColumn":32},{"ruleId":"157","severity":1,"message":"178","line":9,"column":39,"nodeType":"159","messageId":"160","endLine":9,"endColumn":60},{"ruleId":"157","severity":1,"message":"171","line":2,"column":10,"nodeType":"159","messageId":"160","endLine":2,"endColumn":16},{"ruleId":"157","severity":1,"message":"172","line":2,"column":23,"nodeType":"159","messageId":"160","endLine":2,"endColumn":32},{"ruleId":"157","severity":1,"message":"179","line":4,"column":9,"nodeType":"159","messageId":"160","endLine":4,"endColumn":25},{"ruleId":"157","severity":1,"message":"173","line":70,"column":11,"nodeType":"159","messageId":"160","endLine":70,"endColumn":17},{"ruleId":"157","severity":1,"message":"174","line":71,"column":12,"nodeType":"159","messageId":"160","endLine":71,"endColumn":22},{"ruleId":"157","severity":1,"message":"175","line":71,"column":24,"nodeType":"159","messageId":"160","endLine":71,"endColumn":37},{"ruleId":"157","severity":1,"message":"178","line":156,"column":39,"nodeType":"159","messageId":"160","endLine":156,"endColumn":60},{"ruleId":"157","severity":1,"message":"180","line":161,"column":22,"nodeType":"159","messageId":"160","endLine":161,"endColumn":39},{"ruleId":"157","severity":1,"message":"181","line":167,"column":34,"nodeType":"159","messageId":"160","endLine":167,"endColumn":48},{"ruleId":"157","severity":1,"message":"182","line":173,"column":34,"nodeType":"159","messageId":"160","endLine":173,"endColumn":48},{"ruleId":"183","severity":1,"message":"184","line":214,"column":29,"nodeType":"185","messageId":"186","endLine":214,"endColumn":46,"fix":"187"},{"ruleId":"188","severity":1,"message":"189","line":254,"column":8,"nodeType":"190","endLine":254,"endColumn":14,"suggestions":"191"},{"ruleId":"157","severity":1,"message":"192","line":256,"column":8,"nodeType":"159","messageId":"160","endLine":256,"endColumn":13},{"ruleId":"183","severity":1,"message":"193","line":317,"column":82,"nodeType":"185","messageId":"186","endLine":317,"endColumn":104,"fix":"194"},{"ruleId":"183","severity":1,"message":"195","line":341,"column":81,"nodeType":"185","messageId":"186","endLine":341,"endColumn":105,"fix":"196"},{"ruleId":"183","severity":1,"message":"197","line":460,"column":75,"nodeType":"185","messageId":"186","endLine":460,"endColumn":90,"fix":"198"},{"ruleId":"183","severity":1,"message":"199","line":481,"column":75,"nodeType":"185","messageId":"186","endLine":481,"endColumn":89,"fix":"200"},{"ruleId":"157","severity":1,"message":"171","line":15,"column":10,"nodeType":"159","messageId":"160","endLine":15,"endColumn":16},{"ruleId":"157","severity":1,"message":"201","line":66,"column":33,"nodeType":"159","messageId":"160","endLine":66,"endColumn":47},{"ruleId":"157","severity":1,"message":"202","line":67,"column":12,"nodeType":"159","messageId":"160","endLine":67,"endColumn":24},{"ruleId":"157","severity":1,"message":"203","line":68,"column":13,"nodeType":"159","messageId":"160","endLine":68,"endColumn":28},{"ruleId":"204","severity":1,"message":"205","line":96,"column":13,"nodeType":"206","messageId":"207","endLine":124,"endColumn":22,"fix":"208"},{"ruleId":"183","severity":1,"message":"209","line":139,"column":29,"nodeType":"185","messageId":"186","endLine":139,"endColumn":54,"fix":"210"},{"ruleId":"157","severity":1,"message":"180","line":168,"column":22,"nodeType":"159","messageId":"160","endLine":168,"endColumn":39},{"ruleId":"183","severity":1,"message":"193","line":233,"column":81,"nodeType":"185","messageId":"186","endLine":233,"endColumn":103,"fix":"211"},"no-unused-vars","'persistor' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["212"],"no-negated-in-lhs",["213"],"'logout' is assigned a value but never used.","'Link' is defined but never used.","'useLazyQuery' is defined but never used.","'useMutation' is defined but never used.","'useSubscription' is defined but never used.","'DELET_USER_MUTATION' is defined but never used.","'Button' is defined but never used.","'Container' is defined but never used.","'values' is assigned a value but never used.","'fullscreen' is assigned a value but never used.","'setFullscreen' is assigned a value but never used.","'Col' is defined but never used.","'useQuery' is defined but never used.","'submittingUserProfile' is assigned a value but never used.","'GET_Ticket_QUERY' is defined but never used.","'fetchingCountries' is assigned a value but never used.","'fetchingStates' is assigned a value but never used.","'fetchingCities' is assigned a value but never used.","no-useless-computed-key","Unnecessarily computed property ['country'] found.","Property","unnecessarilyComputedProperty",{"range":"214","text":"215"},"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'formik'. Either include it or remove the dependency array.","ArrayExpression",["216"],"'month' is assigned a value but never used.","Unnecessarily computed property ['mobileNumber'] found.",{"range":"217","text":"218"},"Unnecessarily computed property ['whatsappNumber'] found.",{"range":"219","text":"220"},"Unnecessarily computed property ['state'] found.",{"range":"221","text":"222"},"Unnecessarily computed property ['city'] found.",{"range":"223","text":"224"},"'regiserLoading' is assigned a value but never used.","'notification' is assigned a value but never used.","'errnotification' is assigned a value but never used.","no-whitespace-before-property","Unexpected whitespace before property catch.","MemberExpression","unexpectedWhitespace",{"range":"225","text":"226"},"Unnecessarily computed property ['businessCountry'] found.",{"range":"227","text":"228"},{"range":"229","text":"218"},"no-global-assign","no-unsafe-negation",[7653,7664],"'country'",{"desc":"230","fix":"231"},[12996,13012],"'mobileNumber'",[14297,14315],"'whatsappNumber'",[19932,19941],"'state'",[21108,21116],"'city'",[4385,4387],".",[4961,4980],"'businessCountry'",[9214,9230],"Update the dependencies array to be: [formik, user]",{"range":"232","text":"233"},[9577,9583],"[formik, user]"]